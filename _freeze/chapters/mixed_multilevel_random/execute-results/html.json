{
  "hash": "b205bd6f24ad1736eb8d2e8114f62e07",
  "result": {
    "markdown": "# Random effects, mixed models, multilevel modeling {#mixed}\n\n\n## Discussions and resources\n\n[Slack thread on 'what are random effects'?](https://rethinkpriorities.slack.com/archives/G01BDCD2QPR/p1660060733533869)\n\n[A beginner's guide to LMER](https://rstudio-pubs-static.s3.amazonaws.com/63556_e35cc7e2dfb54a5bb551f3fa4b3ec4ae.html) ... the `LMER` package uses a maximum likelihood (not Bayesian) approach\n\n\nMcElreath \"Chapter 12 (?or 13) Models With Memory\", free sample [here](http://xcelab.net/rmpubs/rethinking/Statistical_Rethinking_sample.pdf) and recoding [here](https://bookdown.org/ajkurz/Statistical_Rethinking_recoded/multilevel-models.html)\n\n### Discussing 'partial pooling'\n\nFrom [Tristan Mahr's vignette](https://www.tjmahr.com/plotting-partial-pooling-in-mixed-effects-models/) -- this vignette explains a lot (but it doesn't go into the formal maths)\n\n\n::: {.callout-note collapse=\"true\"}\n## A quick intuition in one use case. Is it correct?\n\nI’m still trying to get my head around (quickly) what we are talking about when we say ‘mixed models’ and ‘random effects’, at least when using lmer.\n\nSuppose I run the following model\n\n```\nm_video_aud <-  all_surveys all_surveys %>%  filter(wave==\"video\") %>%\nlmer(interest80k_mn ~ 1 + condition + audience + condition:audience + (1|reader),\ndat=.)\n```\n\nThis allows a “random intercept” for `reader` ...  But what does that mean? Here is my interpretation — how wrong am I?\n\n> The intercept (“average interest all else comparable”) for each of the two readers is equal to the overall average intercept plus some ‘random deviation’ drawn from a [normal?] distribution\n\n> In effect, this means that the ‘reader coefficient adjustment’ coefficient will be smaller than the adjustment we would get if we just looked at the difference in (the residual of the) outcome across readers. I.e., we ‘adjust less’ for reader than we would do if we made reader a fixed effect (i.e., a ‘dummy in a standard regression’).\n\n> Computationally, I think this happens because  we are assuming something like a normal distribution of the random deviation, where smaller deviations are more likely than large ones, and 0 is the most likely. Thus the larger is the ‘observed reader difference’ we see in the data, the more likely this is to be a ‘freak random draw’ ... thus we shrink this difference term a bit towards 0.\n\n::: \n\nThe above interpretation leaves some unresolved questions:\n\n1. How distinct is this from the ‘regularization with cross-validation’ that we see in Machine learning approaches? E.g., I could do a ridge model where I allow only the coefficient on reader to be regularized; this also leads to the same sort of ‘shrinkage’ ...  so what’s the difference?\n\n2. Thinking by analogy to a Bayesian approach, what does it mean that we assume the intercept is a “random deviations drawn from a distribution”? Isn’t that what we always assume, for each parameter in a Bayesian model … so then, what would it mean for a Bayesian model to have a fixed (vs random) coefficient?\n\n\n3. Why wouldn’t we want all our parameters to be random effects? Why include any fixed effects ...  considering general ideas of overfitting and effects as draws from larger distributions?\n\n\n4. ^[(Related to 3, I think)] What is the impact of the choice of giving one feature a ‘random intercept only’ on the estimates of the other coefficients?\n\nMy thinking, getting back to an earlier discussion, is that by modeling the effect of reader as a random effect, thus shrinking it relative to the standard linear model’s  would mean that the problem of ‘omitted variable bias’ in other coefficients (e.g, on ‘condition’) could remain. This could be a problem if reader is not orthogonal to condition (~if they are correlated to one another).\n\nThis also may come down to the question of ‘do we care mainly about interpreting and assessing a particular coefficient’ (as in most modern econometrics) or ‘do we care mainly about a predictive model overall’? \n\n\n<!-- \n\nWorking through the [Tristan Mahr example](https://www.tjmahr.com/plotting-partial-pooling-in-mixed-effects-models/)\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lme4)\n#> Loading required package: Matrix\nlibrary(dplyr)\nlibrary(tibble)\n\n# Convert to tibble for better printing. Convert factors to strings\nsleepstudy <- sleepstudy %>%\n  as_tibble() %>%\n  mutate(Subject = as.character(Subject))\n\n# Add two fake participants\ndf_sleep <- bind_rows(\n  sleepstudy,\n  tibble(Reaction = c(286, 288), Days = 0:1, Subject = \"374\"),\n  tibble(Reaction = 245, Days = 0, Subject = \"373\"))\n\ndf_sleep\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 183 × 3\n   Reaction  Days Subject\n      <dbl> <dbl> <chr>  \n 1     250.     0 308    \n 2     259.     1 308    \n 3     251.     2 308    \n 4     321.     3 308    \n 5     357.     4 308    \n 6     415.     5 308    \n 7     382.     6 308    \n 8     290.     7 308    \n 9     431.     8 308    \n10     466.     9 308    \n# … with 173 more rows\n```\n:::\n:::\n\n-->\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}