{
  "hash": "1e975943a988848247ad76c488fcda24",
  "result": {
    "markdown": "# Coding, data  {#coding}\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pacman)\np_load(rethinkpriorities)\nlibrary(rethinkpriorities)\nlibrary(dplyr)\nlibrary(tibble)\n```\n:::\n\n\n## Some resources\n\n[R for data science](https://r4ds.had.co.nz/): highly recommended\n\nSee [getting, cleaning, and using data](https://daaronr.github.io/metrics_discussion/data-sci.html) (Reinstein) ^[Todo: integrate key content.]\n\n\n*Pete W's Gists curating...:*\n\n- [Hadley Wickham's \"Advanced R](https://gist.github.com/peterhurford/72dbd44e0a34e29297485a8cf679cf73) ... for the most keen\n\n- [\"Git 101\" (various resources)](https://gist.github.com/peterhurford/4d43aa5d6de114c0c741ba664c9c5ff5)\n\n## Coding and organisational issues\n\n- Data protection (e.g., EA Survey data pre-2021 is not publicly shareable!)\n\n- Good data management\n\n- Reproducability\n\n- Git and github\n\n- R and Rmd\n\n- How to leave comments and collaborate?\n\n- `trackdown` to convert to Gdoc for feedback\n\n- Folder structure, use of packages; esp `Renv`\n\n- Functions etc pulled from `dr-rstuff` repo\n\n- I (DR) love `lower_snake_case`\n\n\\\n\n## Automation and 'dynamic documents' {-}\n\n'Soft-code' as much as possible to avoid conflicting versions when data updates, and to make everything reproduceable and transparent\n\n[Inline code in Rmd](https://bookdown.org/yihui/rmarkdown-cookbook/r-code.html) is great but it can be a double-edged sword.\n\nSometimes its better to 'do the important and complicated coding' in a chunk before this, not in the inline code itself because\n\n- the 'bookdown' doesn't show the *code* generating the inline computation ... so a separate chunk makes it more transparent for external readers\n\n- inline code isn't spaced well and its hard to read and debug.\n\n\n## Data management\n\n- Track it from its 'source'; use API to grab directly from Qualtrics (etc.) if possible\n\n- A `main.R` file in the root directory should run everything\n\n- Data import; external 'dictionary' can be helpful (see, e.g., [here](https://docs.google.com/spreadsheets/d/1dWy-CZxd9lzx0bLZ5ntmCSmwGPTrwjGcKpY4ORLom8E/edit#gid=0) for EAS integrated with Google sheet; R code [here](https://github.com/rethinkpriorities/ea-data/blob/master/build/fmt_label_with_dic_dhj_ok.R) brings it in\n\n- import, cleaning, variable creation separate from analysis (unless its a very 'one-off-for-analysis' thing)\n   - import and cleaning in `.R` rather than `.Rmd` perhaps\n\n- 'raw' data in separate folder from 'munged' data\n\n- `codebook` package -- make a codebook\n\n- minimize 'versions' of the data frames ... code and use 'filter objects' instead\n  - see ['lists of filters'](https://daaronr.github.io/metrics_discussion/data-sci.html#building-results-based-on-lists-of-filters-of-the-data-set) but actually defining the filter with `quo()` seems better.\n\n\n## Standard cleaning steps\n\n`janitor::remove_empty()` # removes empty rows and columns\n\n\n## Naming columns and objects\n\n`janitor::clean_names()` is a helpful shortcut to snake case\n\n\nWe sometimes input a 'dictionary' for renaming many columns at a time. ^[However, I don't think I found a tidy way to do the renaming, at least I can't remember it.]\n\n`names(rename2020) <- eas_dictionary$true_name`\n\n\n\n\n## Labelling columns\n\nSome example code below\n\n\n\n\nPut list of labels and renamings in objects in a separate location ... to avoid duplication and clutter:\n\n::: {.cell}\n\n```{.r .cell-code}\nkey_eas_all_labels <- c( #note these are converted to a list with as.list before assigning them\n    donation_usd = \"Donation (USD)\",\n    l_don_usd = \"Log Don. (USD)\",\n    l_don_av_2yr = \"Log Don. 'avg.'\",\n    ln_age = \"Log age\",\n    don_av2_yr = \"Don. 'avg'\",\n    donation_plan_usd = \"Don. plan (USD)\")\n```\n:::\n\nVariable labels are helpful\n\n::: {.cell}\n\n```{.r .cell-code}\neas_all %<>%\n  labelled::set_variable_labels(.labels = as.list(key_eas_all_labels), .strict=FALSE)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eas_all %<>% labelled::set_variable_labels(.labels = as.list(key_eas_all_labels), : could not find function \"%<>%\"\n```\n:::\n:::\n\n\n\n## Simple summary tools I was not aware of\n\n\nFrom Willem's [intro to R workshop script](https://docs.google.com/document/d/13jPMcG5m4oxinqEtlQ2tSqkQs4-JEUcC0ytz9woFG3E/edit)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n count(cut) %>%\n mutate(pct = n / sum(n))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in count(., cut): object 'diamonds' not found\n```\n:::\n\n```{.r .cell-code}\n# Use tidystats\nlibrary(tidystats)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in library(tidystats): there is no package called 'tidystats'\n```\n:::\n\n```{.r .cell-code}\ncount_data(diamonds, cut)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in count_data(diamonds, cut): could not find function \"count_data\"\n```\n:::\n\n```{.r .cell-code}\ndiamonds %>%\n group_by(color) %>%\n count_data(cut)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in count_data(., cut): could not find function \"count_data\"\n```\n:::\n\n```{.r .cell-code}\ndescribe_data(diamonds, price)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in describe_data(diamonds, price): could not find function \"describe_data\"\n```\n:::\n:::\n\nThis one I knew, of course, the typical 'grouped summary's\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n group_by(color) %>%\n summarize(\n   M = mean(price),\n   SD = sd(price),\n   min = min(price)\n ) %>%\n .kable() %>% .kable_styling()\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in group_by(., color): object 'diamonds' not found\n```\n:::\n:::",
    "supporting": [
      "coding_data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": [],
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}